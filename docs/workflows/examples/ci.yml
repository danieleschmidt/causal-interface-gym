# CI Pipeline for Causal Interface Gym
# Save as: .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        test-type: ['unit', 'integration']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: causal_user
          POSTGRES_PASSWORD: causal_pass
          POSTGRES_DB: causal_experiments_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,ui,docs]"

    - name: Lint with ruff
      run: |
        ruff check .
        ruff format --check .

    - name: Type check with mypy
      run: mypy src/

    - name: Security check with bandit
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      env:
        DATABASE_URL: postgresql://causal_user:causal_pass@localhost:5432/causal_experiments_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/unit/ -v \
          --cov=causal_interface_gym \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=junit-unit.xml

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      env:
        DATABASE_URL: postgresql://causal_user:causal_pass@localhost:5432/causal_experiments_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/integration/ -v \
          --junitxml=junit-integration.xml

    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          junit-*.xml
          htmlcov/
          bandit-report.json

  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint TypeScript/JavaScript
      run: npm run lint

    - name: Type check
      run: npm run type-check

    - name: Run frontend tests
      run: npm run test -- --coverage

    - name: Build frontend
      run: npm run build

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: dist/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, frontend-test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: causal-interface-gym:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm --name test-container \
          -d causal-interface-gym:${{ github.sha }}
        sleep 10
        docker exec test-container python -c "import causal_interface_gym; print('OK')"
        docker stop test-container

  performance-test:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -e ".[dev]"
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        pytest tests/benchmarks/ \
          --benchmark-json=benchmark-results.json \
          --benchmark-only

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

    - name: Comment benchmark results on PR
      if: github.event_name == 'pull_request'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true