# Security Scanning Workflow for Causal Interface Gym
# Save as: .github/workflows/security-scan.yml

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-results.json
      continue-on-error: true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-results.json
      continue-on-error: true

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-results
        path: |
          pip-audit-results.json
          safety-results.json

  code-security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Run Bandit security linter
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-results.json -x tests/
      continue-on-error: true

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"

    - name: Upload Semgrep results to GitHub Advanced Security Dashboard
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

    - name: Upload code security results
      uses: actions/upload-artifact@v3
      with:
        name: code-security-results
        path: |
          bandit-results.json
          semgrep.sarif

  container-security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t causal-interface-gym:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'causal-interface-gym:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /etc/systemd:/etc/systemd:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench-results.txt
      continue-on-error: true

    - name: Upload container security results
      uses: actions/upload-artifact@v3
      with:
        name: container-security-results
        path: |
          trivy-results.sarif
          docker-bench-results.txt

  secrets-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  infrastructure-security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov on Docker files
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile
        output_format: sarif
        output_file_path: checkov-docker.sarif

    - name: Run Checkov on Kubernetes files
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./k8s
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-k8s.sarif
      continue-on-error: true

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-docker.sarif

  web-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start application
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
        sleep 60

    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8501'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      with:
        name: zap-results
        path: report_html.html

    - name: Stop application
      if: always()
      run: docker-compose down

  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, container-security-scan, secrets-scan, infrastructure-security]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security report
      run: |
        python - <<EOF
        import json
        import os
        from pathlib import Path
        
        def load_json_results(file_path):
            try:
                with open(file_path) as f:
                    return json.load(f)
            except:
                return {}
        
        # Collect all security scan results
        report = {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "results": {}
        }
        
        # Process pip-audit results
        pip_audit = load_json_results("dependency-scan-results/pip-audit-results.json")
        if pip_audit.get("vulnerabilities"):
            report["results"]["dependency_vulnerabilities"] = len(pip_audit["vulnerabilities"])
        
        # Process bandit results
        bandit = load_json_results("code-security-results/bandit-results.json")
        if bandit.get("results"):
            high_severity = sum(1 for r in bandit["results"] if r.get("issue_severity") == "HIGH")
            medium_severity = sum(1 for r in bandit["results"] if r.get("issue_severity") == "MEDIUM")
            report["results"]["code_security"] = {
                "high": high_severity,
                "medium": medium_severity,
                "total": len(bandit["results"])
            }
        
        # Generate summary
        total_issues = sum([
            report["results"].get("dependency_vulnerabilities", 0),
            report["results"].get("code_security", {}).get("total", 0)
        ])
        
        report["summary"] = {
            "total_issues": total_issues,
            "risk_level": "HIGH" if total_issues > 10 else "MEDIUM" if total_issues > 0 else "LOW"
        }
        
        # Save report
        with open("security-report.json", "w") as f:
            json.dump(report, f, indent=2)
        
        # Print summary
        print(f"Security Scan Summary:")
        print(f"- Total Issues: {total_issues}")
        print(f"- Risk Level: {report['summary']['risk_level']}")
        if report["results"].get("dependency_vulnerabilities"):
            print(f"- Dependency Vulnerabilities: {report['results']['dependency_vulnerabilities']}")
        if report["results"].get("code_security"):
            cs = report["results"]["code_security"]
            print(f"- Code Security Issues: {cs['total']} (High: {cs['high']}, Medium: {cs['medium']})")
        EOF

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

    - name: Create security issue
      if: github.event_name == 'schedule' && contains(fromJson(steps.report.outputs.summary), 'HIGH')
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
          
          if (report.summary.risk_level === 'HIGH') {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔒 High Risk Security Issues Detected`,
              body: `## Security Scan Results
              
              **Risk Level:** ${report.summary.risk_level}
              **Total Issues:** ${report.summary.total_issues}
              **Scan Date:** ${report.timestamp}
              **Commit:** ${report.commit}
              
              ### Issue Breakdown:
              ${JSON.stringify(report.results, null, 2)}
              
              ### Action Required:
              - [ ] Review dependency vulnerabilities
              - [ ] Address high-severity code security issues
              - [ ] Update security documentation
              - [ ] Run additional manual testing
              
              This issue was automatically created by the security scanning workflow.`,
              labels: ['security', 'high-priority', 'automated']
            });
          }

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
          
          const comment = `## 🔒 Security Scan Results
          
          **Risk Level:** ${report.summary.risk_level}
          **Total Issues:** ${report.summary.total_issues}
          
          ${report.summary.risk_level === 'HIGH' ? '⚠️ **High risk issues detected!** Please review before merging.' : '✅ Security scan completed successfully.'}
          
          <details>
          <summary>Detailed Results</summary>
          
          \`\`\`json
          ${JSON.stringify(report.results, null, 2)}
          \`\`\`
          </details>
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });